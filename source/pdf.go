package source

import (
	"io"
	"log"
	"github.com/edustor/gen/bindata"
	"github.com/satori/go.uuid"
	"fmt"
	"strings"
	"time"
	"bytes"
	"github.com/signintech/gopdf"
	"io/ioutil"
	"os"
)

func GenPdf(writter io.Writer, pageCount int) (err error) {
	pdf := gopdf.GoPdf{}
	pageSize := gopdf.Rect{W: 595.28, H: 841.89}
	pdf.Start(gopdf.Config{PageSize: pageSize})

	tempDir, err := ioutil.TempDir("", "edustor-pdfgen")
	if err != nil {
		return err
	}

	for i := 0; i < pageCount; i++ {
		pdf.AddPage()

		pageId := uuid.NewV4().String()
		uri := fmt.Sprintf("https://edustor.ru/p/%s", pageId)
		qr, err := GenQR(uri)
		if err != nil {
			panic(err)
		}

		qrFile, err := ioutil.TempFile(tempDir, "qr")
		if err != nil {
			return err
		}

		_, err = qrFile.Write(qr)
		if err != nil {
			return err
		}
		qrFile.Close()

		drawPage(&pdf, pageSize, pageId, qrFile.Name())
	}

	pdfBytes := pdf.GetBytesPdf()
	err = os.RemoveAll(tempDir)

	writter.Write(pdfBytes)
	return err
}

func drawPage(pdf *gopdf.GoPdf, pageSize gopdf.Rect, pageId string, qrImagePath string) {
	//TODO: BUG: Text is not visible
	fontTTF, err := bindata.Asset("fonts/Proxima Nova Thin.ttf")
	if err != nil {
		log.Panic(err)
	}
	pdf.AddTTFFontByReaderWithOption("Proxima Nova Thin", bytes.NewReader(fontTTF), gopdf.TtfOption{})
	pdf.SetFont("Proxima Nova Thin", "Thin", 11)

	pdf.SetLineWidth(0.01)
	pdf.SetStrokeColor(128, 128, 128)

	const X_CELLS = 40
	const Y_CELLS = 56
	const CELL_SIDE = 5 / 25.4 * 72

	xMargin := (pageSize.W - (X_CELLS * CELL_SIDE)) / 2
	yMargin := (pageSize.H - (Y_CELLS * CELL_SIDE)) / 2

	xMin, xMax := xMargin, pageSize.W-xMargin
	yMin, yMax := yMargin, pageSize.H-yMargin

	// Grid
	for x := xMin; x <= xMax; x += CELL_SIDE {
		pdf.Line(x, yMin, x, yMax)
	}

	for y := yMin; y <= yMax; y += CELL_SIDE {
		pdf.Line(xMin, y, xMax, y)
	}

	// Format top/bottom id
	_idParts := strings.Split(pageId, "-")
	_idTail := _idParts[len(_idParts)-1]

	topId := fmt.Sprintf("#%s  #__________", _idTail[8:12])
	bottomId := fmt.Sprintf("#%s-%s-%s", _idTail[0:4], _idTail[4:8], _idTail[8:12])

	// Print header
	pdf.SetY(yMin - 12)
	pdf.SetX(xMin)
	pdf.Cell(nil, "Edustor Alpha")

	topWidth, err := pdf.MeasureTextWidth(topId)
	pdf.SetX(xMax - 1 - topWidth)
	pdf.Cell(&gopdf.Rect{W: 1, H: 1}, topId)

	// Print copyright
	pdf.SetY(yMax + 2)
	pdf.SetX(xMin - 1.4)
	pdf.SetFont("Proxima Nova Thin", "Thin", 8)
	now := time.Now()
	//TODO: Fix B appearing before © after render
	copyrightStr := fmt.Sprintf("Generated by Edustor PDFGen on %v. ©Edustor Project. Dmitry Romanov, %v",
		now.Format(time.UnixDate), now.Year())
	pdf.Cell(&gopdf.Rect{W: 1, H: 1}, copyrightStr)

	// Print bottom id
	bottomIdWidth, err := pdf.MeasureTextWidth(bottomId)
	pdf.SetX(xMax - 1 - bottomIdWidth)
	pdf.Cell(&gopdf.Rect{W: 1, H: 1}, bottomId)

	// Draw image
	pdf.Image(qrImagePath, xMax-3*CELL_SIDE, yMax-3*CELL_SIDE, &gopdf.Rect{3 * CELL_SIDE, 3 * CELL_SIDE})
}
